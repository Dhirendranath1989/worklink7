rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasValidUserData() {
      return request.resource.data.keys().hasAll(['uid', 'email', 'userType', 'profileCompleted']) &&
             request.resource.data.uid == request.auth.uid &&
             request.resource.data.userType in ['worker', 'owner'];
    }
    
    function isValidWorkerData() {
      return request.resource.data.userType == 'worker' &&
             request.resource.data.keys().hasAll(['skills', 'workExperience', 'hourlyRate']) &&
             request.resource.data.skills is list &&
             request.resource.data.hourlyRate is number &&
             request.resource.data.hourlyRate > 0;
    }
    
    function isValidOwnerData() {
      return request.resource.data.userType == 'owner' &&
             request.resource.data.keys().hasAll(['businessType']) &&
             request.resource.data.businessType is string;
    }
    
    // Users collection - for general user data and profile completion tracking
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isAuthenticated(); // Allow other users to read basic profile info
    }
    
    // Workers collection - for worker-specific profiles
    match /workers/{workerId} {
      allow read: if isAuthenticated(); // Anyone can read worker profiles for search
      allow create: if isOwner(workerId) && 
                       hasValidUserData() && 
                       isValidWorkerData();
      allow update: if isOwner(workerId) && 
                       hasValidUserData() && 
                       isValidWorkerData();
      allow delete: if isOwner(workerId);
    }
    
    // Owners collection - for owner-specific profiles
    match /owners/{ownerId} {
      allow read: if isAuthenticated(); // Workers can read owner profiles
      allow create: if isOwner(ownerId) && 
                       hasValidUserData() && 
                       isValidOwnerData();
      allow update: if isOwner(ownerId) && 
                       hasValidUserData() && 
                       isValidOwnerData();
      allow delete: if isOwner(ownerId);
    }
    
    // Jobs collection
    match /jobs/{jobId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                       request.resource.data.ownerId == request.auth.uid;
      allow update: if isAuthenticated() && 
                       (resource.data.ownerId == request.auth.uid || 
                        request.resource.data.applicants[request.auth.uid] != null);
      allow delete: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
    }
    
    // Applications collection
    match /applications/{applicationId} {
      allow read: if isAuthenticated() && 
                     (resource.data.workerId == request.auth.uid || 
                      resource.data.ownerId == request.auth.uid);
      allow create: if isAuthenticated() && 
                       request.resource.data.workerId == request.auth.uid;
      allow update: if isAuthenticated() && 
                       (resource.data.workerId == request.auth.uid || 
                        resource.data.ownerId == request.auth.uid);
      allow delete: if isAuthenticated() && 
                       (resource.data.workerId == request.auth.uid || 
                        resource.data.ownerId == request.auth.uid);
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                       (request.resource.data.reviewerId == request.auth.uid);
      allow update: if isAuthenticated() && 
                       resource.data.reviewerId == request.auth.uid;
      allow delete: if isAuthenticated() && 
                       resource.data.reviewerId == request.auth.uid;
    }
    
    

    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Admin collection - restricted to admin users only
    match /admin/{document=**} {
      allow read, write: if isAuthenticated() && 
                            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Analytics and logs - admin only
    match /analytics/{document=**} {
      allow read, write: if isAuthenticated() && 
                            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // System settings - admin only
    match /settings/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}